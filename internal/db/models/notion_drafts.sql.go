// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notion_drafts.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNotionDraft = `-- name: CreateNotionDraft :one
INSERT INTO notion_drafts (
    id,
    user_id,
    notion_integration_id,
    notion_page_id,
    published_page_id,
    title,
    status,
    is_orphaned
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         )
    RETURNING id, user_id, notion_integration_id, notion_page_id, published_page_id, title, status, is_orphaned, created_at, updated_at
`

type CreateNotionDraftParams struct {
	ID                  uuid.UUID       `json:"id"`
	UserID              uuid.UUID       `json:"user_id"`
	NotionIntegrationID uuid.UUID       `json:"notion_integration_id"`
	NotionPageID        string          `json:"notion_page_id"`
	PublishedPageID     pgtype.Text     `json:"published_page_id"`
	Title               pgtype.Text     `json:"title"`
	Status              NullDraftStatus `json:"status"`
	IsOrphaned          pgtype.Bool     `json:"is_orphaned"`
}

func (q *Queries) CreateNotionDraft(ctx context.Context, arg CreateNotionDraftParams) (NotionDraft, error) {
	row := q.db.QueryRow(ctx, createNotionDraft,
		arg.ID,
		arg.UserID,
		arg.NotionIntegrationID,
		arg.NotionPageID,
		arg.PublishedPageID,
		arg.Title,
		arg.Status,
		arg.IsOrphaned,
	)
	var i NotionDraft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotionIntegrationID,
		&i.NotionPageID,
		&i.PublishedPageID,
		&i.Title,
		&i.Status,
		&i.IsOrphaned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotionDraftByID = `-- name: GetNotionDraftByID :one
SELECT id, user_id, notion_integration_id, notion_page_id, published_page_id, title, status, is_orphaned, created_at, updated_at FROM notion_drafts
WHERE id = $1
`

func (q *Queries) GetNotionDraftByID(ctx context.Context, id uuid.UUID) (NotionDraft, error) {
	row := q.db.QueryRow(ctx, getNotionDraftByID, id)
	var i NotionDraft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotionIntegrationID,
		&i.NotionPageID,
		&i.PublishedPageID,
		&i.Title,
		&i.Status,
		&i.IsOrphaned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotionDraftByPageID = `-- name: GetNotionDraftByPageID :one
SELECT id, user_id, notion_integration_id, notion_page_id, published_page_id, title, status, is_orphaned, created_at, updated_at FROM notion_drafts
WHERE notion_page_id = $1
`

func (q *Queries) GetNotionDraftByPageID(ctx context.Context, notionPageID string) (NotionDraft, error) {
	row := q.db.QueryRow(ctx, getNotionDraftByPageID, notionPageID)
	var i NotionDraft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotionIntegrationID,
		&i.NotionPageID,
		&i.PublishedPageID,
		&i.Title,
		&i.Status,
		&i.IsOrphaned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isValidNotionDraftPage = `-- name: IsValidNotionDraftPage :one
SELECT EXISTS (
    SELECT 1 FROM notion_drafts
    WHERE user_id = $1
      AND notion_page_id = $2
      AND status = 'draft'
)
`

type IsValidNotionDraftPageParams struct {
	UserID       uuid.UUID `json:"user_id"`
	NotionPageID string    `json:"notion_page_id"`
}

func (q *Queries) IsValidNotionDraftPage(ctx context.Context, arg IsValidNotionDraftPageParams) (bool, error) {
	row := q.db.QueryRow(ctx, isValidNotionDraftPage, arg.UserID, arg.NotionPageID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listNotionDraftsForUser = `-- name: ListNotionDraftsForUser :many
SELECT id, user_id, notion_integration_id, notion_page_id, published_page_id, title, status, is_orphaned, created_at, updated_at FROM notion_drafts
WHERE user_id = $1
  AND is_orphaned = false
ORDER BY created_at DESC
`

func (q *Queries) ListNotionDraftsForUser(ctx context.Context, userID uuid.UUID) ([]NotionDraft, error) {
	rows, err := q.db.Query(ctx, listNotionDraftsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NotionDraft{}
	for rows.Next() {
		var i NotionDraft
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NotionIntegrationID,
			&i.NotionPageID,
			&i.PublishedPageID,
			&i.Title,
			&i.Status,
			&i.IsOrphaned,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrphanedNotionDrafts = `-- name: ListOrphanedNotionDrafts :many
SELECT id, user_id, notion_integration_id, notion_page_id, published_page_id, title, status, is_orphaned, created_at, updated_at FROM notion_drafts
WHERE is_orphaned = true
ORDER BY created_at DESC
`

func (q *Queries) ListOrphanedNotionDrafts(ctx context.Context) ([]NotionDraft, error) {
	rows, err := q.db.Query(ctx, listOrphanedNotionDrafts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NotionDraft{}
	for rows.Next() {
		var i NotionDraft
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NotionIntegrationID,
			&i.NotionPageID,
			&i.PublishedPageID,
			&i.Title,
			&i.Status,
			&i.IsOrphaned,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDraftsAsOrphanedByIntegration = `-- name: MarkDraftsAsOrphanedByIntegration :exec
UPDATE notion_drafts
SET status = 'orphaned',
    is_orphaned = true,
    updated_at = now()
WHERE notion_integration_id = $1
`

func (q *Queries) MarkDraftsAsOrphanedByIntegration(ctx context.Context, notionIntegrationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, markDraftsAsOrphanedByIntegration, notionIntegrationID)
	return err
}

const setPublishedPageForDraft = `-- name: SetPublishedPageForDraft :exec
UPDATE notion_drafts
SET published_page_id = $1,
    status = 'published',
    updated_at = now()
WHERE id = $2
`

type SetPublishedPageForDraftParams struct {
	PublishedPageID pgtype.Text `json:"published_page_id"`
	ID              uuid.UUID   `json:"id"`
}

func (q *Queries) SetPublishedPageForDraft(ctx context.Context, arg SetPublishedPageForDraftParams) error {
	_, err := q.db.Exec(ctx, setPublishedPageForDraft, arg.PublishedPageID, arg.ID)
	return err
}

const updateDraftStatus = `-- name: UpdateDraftStatus :exec
UPDATE notion_drafts
SET status = $1,
    updated_at = now()
WHERE id = $2
`

type UpdateDraftStatusParams struct {
	Status NullDraftStatus `json:"status"`
	ID     uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateDraftStatus(ctx context.Context, arg UpdateDraftStatusParams) error {
	_, err := q.db.Exec(ctx, updateDraftStatus, arg.Status, arg.ID)
	return err
}
