// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: integrations.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createIntegration = `-- name: CreateIntegration :one
INSERT INTO integrations (
    id, user_id, service, access_token, refresh_token, token_type, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, service, access_token, refresh_token, token_type, expires_at, created_at
`

type CreateIntegrationParams struct {
	ID           uuid.UUID          `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Service      string             `json:"service"`
	AccessToken  string             `json:"access_token"`
	RefreshToken pgtype.Text        `json:"refresh_token"`
	TokenType    pgtype.Text        `json:"token_type"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateIntegration(ctx context.Context, arg CreateIntegrationParams) (Integration, error) {
	row := q.db.QueryRow(ctx, createIntegration,
		arg.ID,
		arg.UserID,
		arg.Service,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenType,
		arg.ExpiresAt,
	)
	var i Integration
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Service,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getIntegrationByService = `-- name: GetIntegrationByService :one
SELECT id, user_id, service, access_token, refresh_token, token_type, expires_at, created_at FROM integrations
WHERE user_id = $1 AND service = $2
LIMIT 1
`

type GetIntegrationByServiceParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Service string      `json:"service"`
}

func (q *Queries) GetIntegrationByService(ctx context.Context, arg GetIntegrationByServiceParams) (Integration, error) {
	row := q.db.QueryRow(ctx, getIntegrationByService, arg.UserID, arg.Service)
	var i Integration
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Service,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getIntegrationsForUser = `-- name: GetIntegrationsForUser :many
SELECT id, user_id, service, access_token, refresh_token, token_type, expires_at, created_at FROM integrations
WHERE user_id = $1
`

func (q *Queries) GetIntegrationsForUser(ctx context.Context, userID pgtype.UUID) ([]Integration, error) {
	rows, err := q.db.Query(ctx, getIntegrationsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Integration{}
	for rows.Next() {
		var i Integration
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Service,
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenType,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotionIntegrationsForUser = `-- name: GetNotionIntegrationsForUser :many
SELECT i.id, i.user_id, i.service, i.access_token, i.refresh_token, i.token_type, i.expires_at, i.created_at
FROM integrations i
WHERE i.user_id = $1 AND i.service = 'notion'
`

func (q *Queries) GetNotionIntegrationsForUser(ctx context.Context, userID pgtype.UUID) ([]Integration, error) {
	rows, err := q.db.Query(ctx, getNotionIntegrationsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Integration{}
	for rows.Next() {
		var i Integration
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Service,
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenType,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
